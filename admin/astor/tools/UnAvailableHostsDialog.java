//+======================================================================
// $Source$
//
// Project:   Tango
//
// Description:  Basic Dialog Class to display info
//
// $Author$
//
// Copyright (C) :      2004,2005,2006,2007,2008,2009,2009
//						European Synchrotron Radiation Facility
//                      BP 220, Grenoble 38043
//                      FRANCE
//
// This file is part of Tango.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Revision$
//
// $Log$
//
//-======================================================================

package admin.astor.tools;

import admin.astor.AstorUtil;
import fr.esrf.Tango.DevFailed;
import fr.esrf.TangoApi.*;
import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;
import fr.esrf.tangoatk.widget.util.ErrorPane;

import javax.swing.*;
import java.awt.*;
import java.util.Vector;


//===============================================================
/**
 *	JDialog Class to display info
 *
 *	@author  Pascal Verdier
 */
//===============================================================


public class UnAvailableHostsDialog extends JDialog
{
	private JFrame	parent;
    private Vector<String>  stoppedHosts;
	//===============================================================
	/*
	 *	Creates new form UnAvailableHostsDialog
	 */
	//===============================================================
	public UnAvailableHostsDialog(JFrame parent) throws DevFailed
	{
		super(parent, true);
		this.parent = parent;
		initComponents();

        String[]	ctrlHosts = AstorUtil.getInstance().getHostControlledList();
        PingHosts   pg = new PingHosts(ctrlHosts);
        stoppedHosts = pg.getStopped();
        int x = 0;
        int y = 0;
        for (String hostName : stoppedHosts) {
            JButton btn = new JButton(hostName);
            btn.setBackground(Color.red);
            btn.setForeground(Color.white);
            btn.addActionListener(new java.awt.event.ActionListener() {
                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                     hostBtnActionPerformed(evt);
                 }
             });
            GridBagConstraints gbc = new GridBagConstraints ();
            gbc.gridx  = x++;
            gbc.gridy  = y;
            gbc.fill  = GridBagConstraints.HORIZONTAL;
            gbc.insets = new java.awt.Insets(10, 10, 10, 10);
            centerPanel.add(btn, gbc);

            if (x == 4) {
                x = 0;
                y++;
            }
        }

		pack();
 		ATKGraphicsUtils.centerDialog(this);
	}

	//===============================================================
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	//===============================================================
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel topPanel = new javax.swing.JPanel();
        javax.swing.JLabel titleLabel = new javax.swing.JLabel();
        centerPanel = new javax.swing.JPanel();
        javax.swing.JPanel bottomPanel = new javax.swing.JPanel();
        javax.swing.JButton unexportAllBtn = new javax.swing.JButton();
        javax.swing.JButton cancelBtn = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 18));
        titleLabel.setText("Unreachable Hosts");
        topPanel.add(titleLabel);

        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

        centerPanel.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        bottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 50, 5));

        unexportAllBtn.setText("Unexport All ");
        unexportAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unexportAllBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(unexportAllBtn);

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        bottomPanel.add(cancelBtn);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	//===============================================================
	//===============================================================
	private void hostBtnActionPerformed(java.awt.event.ActionEvent evt) {
        JButton btn = (JButton) evt.getSource();
        String  hostName = btn.getText();
        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            OneHost host = new OneHost(hostName);
            new PopupText(this, host).setVisible(true);
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
         }
        catch(DevFailed e) {
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            ErrorPane.showErrorMessage(this, null, e);
        }
    }
	//===============================================================
	//===============================================================
    @SuppressWarnings({"UnusedDeclaration"})
	private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
		doClose();
	}//GEN-LAST:event_cancelBtnActionPerformed

	//===============================================================
	//===============================================================
    @SuppressWarnings({"UnusedDeclaration"})
	private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
		doClose();
	}//GEN-LAST:event_closeDialog

    //===============================================================
    //===============================================================
    @SuppressWarnings({"UnusedDeclaration"})
    private void unexportAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unexportAllBtnActionPerformed

        Object[] options = {"Un Export", "Next Host", "Cancel"};
        for (String hostName : stoppedHosts) {
            switch (JOptionPane.showOptionDialog(this,
                        "Unexport all devices registred on " + hostName + " ?",
                        "Confirmation Window",
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.WARNING_MESSAGE,
                        null, options, options[0]))
            {
            case 0:    //	Un Export
                try {
                    setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    OneHost host = new OneHost(hostName);
                    host.unExportDeices();
                    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }
                catch(DevFailed e) {
                    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    ErrorPane.showErrorMessage(this, null, e);
                }
                break;
            case 1:    // Next
                break;
            case 2:    //	Cancel
            case -1:   //	escape
                return;
            }
        }
    }//GEN-LAST:event_unexportAllBtnActionPerformed

	//===============================================================
	/**
	 *	Closes the dialog
	 */
	//===============================================================
	private void doClose()
	{
		setVisible(false);
		dispose();
        if (parent.getWidth()==0)
            System.exit(0);
	}
	//===============================================================
	//===============================================================

	//===============================================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    // End of variables declaration//GEN-END:variables
	//===============================================================




	//===============================================================
	/**
	* @param args the command line arguments
	*/
	//===============================================================
	public static void main(String args[]) {
	
		try
		{
			new UnAvailableHostsDialog(new JFrame()).setVisible(true);
		}
		catch(DevFailed e)
		{
            ErrorPane.showErrorMessage(new Frame(), null, e);
		}
	}











    //===============================================================
    //===============================================================
    private class OneHost extends Vector<OneServer>
    {
        private String  name;
        //===========================================================
        private OneHost(String name) throws DevFailed
        {
            this.name = name;
            //  Get server list
            DeviceProxy dbDev = new DeviceProxy(ApiUtil.get_db_obj().get_name());
            DeviceData  argin = new DeviceData();
            argin.insert(name);
            DeviceData  argout = dbDev.command_inout("DbGetHostServersInfo", argin);
            String[]    servers = argout.extractStringArray();
            for (int i=0 ; i<servers.length ; i++) {
                if ((i%3)==0)   //  1- controlled, 2 - level
                    add(new OneServer(servers[i]));
            }
        }
        //===========================================================
        private void unExportDeices() throws DevFailed
        {
            for (OneServer server : this) {
                server.unExportDeices();
            }
        }
        //===========================================================
        public String toString()
        {
            StringBuffer    sb = new StringBuffer(name + ":\n");
            for (OneServer server : this) {
                sb.append(server).append("\n");
            }
            return sb.toString();
        }
        //===========================================================
    }
    //===============================================================
    //===============================================================
    private class OneServer extends Vector<DeviceProxy> // devices
    {
        private String  name;
        //===========================================================
        private OneServer(String name) throws DevFailed
        {
            this.name = name;
            //  Get device list
            DbServer    dbServer= new DbServer(name);
            String[]    devClasses = dbServer.get_device_class_list();
            for (int i=0 ; i<devClasses.length ; i++) {
                if ((i%2)==0) { //  1- class name
                    add(new DeviceProxy(devClasses[i]));
                }
            }
        }
        //===========================================================
        private void unExportDeices() throws DevFailed
        {
            for (DeviceProxy deviceProxy : this) {
                deviceProxy.unexport_device();
            }
        }
        //===========================================================
        public String toString()
         {
             StringBuffer    sb = new StringBuffer(name + ":\n");
             for (DeviceProxy deviceProxy : this) {
                 sb.append("\t").append(deviceProxy.name()).append("\n");
             }
             return sb.toString();
         }
        //===========================================================
    }



    
    //===============================================================
    //===============================================================
    public class PopupText extends JDialog
    {
         private OneHost host;
         private javax.swing.JScrollPane jScrollPane1;
         private javax.swing.JTextArea textArea;
         //======================================================
        /*
         *	Creates new form PopupText
         */
        //======================================================
        public PopupText(JDialog parent, OneHost host) {
            super (parent, true);
            this.host = host;
            initComponents ();
            textArea.setText(host.toString());
            pack ();
            ATKGraphicsUtils.centerDialog(this);
        }

        //======================================================
        //======================================================
        private void initComponents ()
        {
            jScrollPane1 = new javax.swing.JScrollPane ();
            textArea = new javax.swing.JTextArea ();
            textArea.setFont(new java.awt.Font("monospaced", 1, 12));
            addWindowListener (new java.awt.event.WindowAdapter () {
            public void windowClosing (java.awt.event.WindowEvent evt) {
                closeDialog (evt);
                }}
            );


            JButton unexportButton = new JButton("UnExport devices");
            unexportButton.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                unexportButtonActionPerformed (evt);
                }}
            );
           JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener (new java.awt.event.ActionListener () {
            public void actionPerformed (java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed (evt);
                }}
            );

            JPanel buttonPanel = new JPanel ();
            buttonPanel.setLayout (new java.awt.FlowLayout (2, 5, 5));
            buttonPanel.add (unexportButton);
            buttonPanel.add (cancelButton);

            getContentPane ().add (buttonPanel, java.awt.BorderLayout.SOUTH);
            jScrollPane1.setViewportView (textArea);
            getContentPane ().add (jScrollPane1, java.awt.BorderLayout.CENTER);
        }
        //============================================================
        //============================================================
        public void setFont(java.awt.Font font)
        {
            textArea.setFont(font);
        }
        //============================================================
        //============================================================
        @SuppressWarnings({"UnusedDeclaration"})
        private void unexportButtonActionPerformed (java.awt.event.ActionEvent evt) {
            System.out.println("Unexport devices for " + host.name);
            try {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                host.unExportDeices();
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
            catch(DevFailed e) {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                ErrorPane.showErrorMessage(this, null, e);
            }
            doClose();
        }
        //============================================================
        //============================================================
        @SuppressWarnings({"UnusedDeclaration"})
        private void cancelButtonActionPerformed (java.awt.event.ActionEvent evt) {
            doClose();
        }
        //============================================================
        //============================================================
        @SuppressWarnings({"UnusedDeclaration"})
        private void closeDialog(java.awt.event.WindowEvent evt) {
            doClose();
        }
        //============================================================
        //============================================================
        private void doClose () {
            setVisible (false);
            dispose ();
        }
    }
}
