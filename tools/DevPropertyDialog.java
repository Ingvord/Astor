//+======================================================================
// $Source$
//
// Project:   Tango
//
// Description:  Basic Dialog Class to display info
//
// $Author$
//
// $Revision$
// $Log$
// Revision 1.1  2007/04/04 13:01:56  pascal_verdier
// Database attribute properties editor added.
//
//
//
// Copyleft 2007 by European Synchrotron Radiation Facility, Grenoble, France
//               All Rights Reversed
//-======================================================================

package admin.astor.tools;

import fr.esrf.Tango.*;
import fr.esrf.TangoDs.*;
import fr.esrf.TangoApi.*;
import fr.esrf.tangoatk.widget.util.ErrorPane;
import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;


//===============================================================
/**
 *	Class Description: Basic Dialog Class to display info
 *
 *	@author  Pascal Verdier
 */
//===============================================================


public class DevPropertyDialog extends JDialog
{
	private JDialog		parent;
	private DbDevice	dev;
	private DbServerArchitecture.TangoAtt att;
	//===============================================================
	/**
	 *	Creates new form DevPropertyDialog
	 */
	//===============================================================
	public DevPropertyDialog(JDialog parent, DbDevice dev,
						DbServerArchitecture.TangoAtt att)
	{
		super(parent, true);
		this.parent = parent;
		this.dev    = dev;
		this.att    = att;
		initComponents();
		initOwnComponents();

		titleLabel.setText(dev.name() + "/" + att.name + "  Properties");
		pack();
		ATKGraphicsUtils.centerDialog(this);
	}
	//===============================================================
	//===============================================================
	private	JTextField[]	txt;
	private	JButton[]		btn;
	private void initOwnComponents()
	{
		JPanel	panel = new JPanel();
        panel.setLayout(new GridBagLayout());
		
		GridBagConstraints	gbc = new GridBagConstraints();

		txt   = new JTextField[att.prop.length];
		btn   = new JButton[att.prop.length];
		for (int i=0 ; i<att.prop.length ; i++)
		{
			int	x = 0;
			//	Label to display property name
			gbc.gridx = x++;
			gbc.gridy = i;
			gbc.fill = GridBagConstraints.HORIZONTAL;
			panel.add(new JLabel(att.prop[i].name + " :   "), gbc);
			
			//	Text to edit value
			gbc.gridx = x++;
			gbc.gridy = i;
			txt[i] = new JTextField();
			txt[i].setColumns(25);
			txt[i].setText(att.prop[i].strval);
			panel.add(txt[i], gbc);
			
			//	Dummy label for separator
			gbc.gridx = x++;
			gbc.gridy = i;
			panel.add(new JLabel("   "), gbc);

			//	Button to read history
			gbc.gridx = x++;
			gbc.gridy = i;
			btn[i] = new JButton("Histo");
        	btn[i].addActionListener(new java.awt.event.ActionListener() {
            	public void actionPerformed(java.awt.event.ActionEvent evt) {
               	 histoActionPerformed(evt);
            	}
        	});
			panel.add(btn[i], gbc);
		}
        getContentPane().add(panel, java.awt.BorderLayout.CENTER);
		okBtn.setText("Apply");
	}
	//===============================================================
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	//===============================================================
    private void initComponents() {//GEN-BEGIN:initComponents
          jPanel1 = new javax.swing.JPanel();
          okBtn = new javax.swing.JButton();
          cancelBtn = new javax.swing.JButton();
          jPanel2 = new javax.swing.JPanel();
          titleLabel = new javax.swing.JLabel();
          
          addWindowListener(new java.awt.event.WindowAdapter() {
              public void windowClosing(java.awt.event.WindowEvent evt) {
                  closeDialog(evt);
              }
          });
          
          okBtn.setText("OK");
          okBtn.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  okBtnActionPerformed(evt);
              }
          });
          
          jPanel1.add(okBtn);
          
          cancelBtn.setText("Cancel");
          cancelBtn.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  cancelBtnActionPerformed(evt);
              }
          });
          
          jPanel1.add(cancelBtn);
          
          getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);
          
          titleLabel.setFont(new java.awt.Font("Dialog", 1, 18));
          titleLabel.setText("Dialog Title");
          jPanel2.add(titleLabel);
          
          getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);
        
        pack();
    }//GEN-END:initComponents

	//===============================================================
	//===============================================================
	private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed

		Vector	v = new Vector();
		for (int i=0 ; i<txt.length ; i++)
		{
			String	strval = txt[i].getText();
			//	Check if it has been changed
			if (!strval.equals(att.prop[i].strval))
			{
				try
				{
					//	Write it in database
					DbAttribute	att1 = new DbAttribute(att.name);
					DbDatum	datum = new DbDatum(att.prop[i].name);
					datum.insert(strval);
					att1.add(datum);

					dev.put_attribute_property(att1);

					//	Update message to be displayed
					v.add(att.prop[i].name + ":    " +
						att.prop[i].strval + " --> " + strval);

					//	Update local value
					att.prop[i].strval = strval;
				}
				catch (DevFailed e)
				{
					ErrorPane.showErrorMessage(this, "att.prop[i]", e);
				}
			}
		}
		String	message = "";
		if (v.size()>0)
		{
			for (int i=0 ; i<v.size() ; i++)
				message += (String)v.get(i);
		}
		else
			message = "Nothing changed !";
		app_util.PopupMessage.show(this, message);

		doClose();
	}//GEN-LAST:event_okBtnActionPerformed

	//===============================================================
	//===============================================================
	private void histoActionPerformed(java.awt.event.ActionEvent evt) {
		
		//	Retreive index
		JButton	b = (JButton)evt.getSource();
		int		idx = -1;
		for (int i=0 ; i<btn.length ; i++)
			if (b==btn[i])
				idx = i;
		if (idx<0)
		{
			app_util.PopupError.show(this, "Cannot retreive Device, attribute...");
			return;
		}
		
		try
		{
			String		propname = att.prop[idx].name;
			Database	db    = ApiUtil.get_db_obj();
			DbHistory[] histo = db.get_device_attribute_property_history(
										dev.name(), att.name, propname);
			
			String[]	strhisto = new String[histo.length];
			int			nb = histo.length;
			if (nb==0)
			{
				app_util.PopupError.show(this, "No history found !");
				return;
			}
			
			for (int i=0 ; i<histo.length ; i++)
			{
				strhisto[nb-i-1] = histo[i].getDate() +
							":      " + histo[i].getValue();
			}

			String	 choice;
			if ((choice=(String) JOptionPane.showInputDialog(parent, 
								dev.name() + "/" + att.name + "-" + propname +  " :", "",
								JOptionPane.INFORMATION_MESSAGE, null,
								strhisto, strhisto[0])) != null)
			{	
				//	Set only value to text field
				int	start = choice.indexOf(":   ") + 1;
				txt[idx].setText(choice.substring(start).trim());
			}
		}
		catch(DevFailed e)
		{
			ErrorPane.showErrorMessage(this, "Attribute Property History", e);
		}
	}
	//===============================================================
	//===============================================================
	private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
		doClose();
	}//GEN-LAST:event_cancelBtnActionPerformed

	//===============================================================
	/**
	 *	Closes the dialog
	 */
	//===============================================================
	private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
		doClose();
	}//GEN-LAST:event_closeDialog

	//===============================================================
	/**
	 *	Closes the dialog
	 */
	//===============================================================
	private void doClose()
	{
		setVisible(false);
		dispose();
	}

	//===============================================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton okBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
	//===============================================================

	//===============================================================
	//===============================================================
/*
	private void get_property_history(String devname, String attname, String propname)
	{
		DbHistory[] 	histo = 
			get_device_attribute_property_history(devname, attname, propname);
	}
*/
}
