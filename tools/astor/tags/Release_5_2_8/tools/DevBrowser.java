//+======================================================================
// $Source$
//
// Project:   Tango
//
// Description:  java source code for main swing class.
//
// $Author$
//
// $Revision$
// $Log$
// Revision 1.5  2009/01/16 14:50:02  pascal_verdier
// Black box management added for host and Server.
//
// Revision 1.4  2008/11/19 10:04:38  pascal_verdier
// Minor changes
//
// Revision 1.3  2008/03/27 08:08:26  pascal_verdier
// Compatibility with Starter 4.0 and after only !
// Better management of server list.
// Server state MOVING managed.
// Hard kill added on servers.
// New features on polling profiler.
//
// Revision 1.2  2006/09/19 13:09:39  pascal_verdier
// Minor changes.
//
// Revision 1.1.1.1  2006/01/11 08:34:48  pascal_verdier
// Imported using TkCVS
//
//
// Copyleft 2006 by European Synchrotron Radiation Facility, Grenoble, France
//               All Rights Reversed
//-======================================================================


package admin.astor.tools;

import admin.astor.Astor;
import admin.astor.ManagePollingDialog;
import fr.esrf.Tango.DevFailed;
import fr.esrf.TangoApi.DeviceProxy;
import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;
import fr.esrf.tangoatk.widget.util.ErrorPane;

import javax.swing.*;
import java.awt.*;



//=======================================================
/**
 *	Class Description: JFrame extention Class to display
 *		browsing and  accessing devices
 *
 * @author  Pascal Verdier
 */
//=======================================================
public class DevBrowser extends JFrame
{
	private JFrame			parent;
	private DevBrowserTree	tree;

    private static EventsTable     ev_table;
	//=======================================================
    /**
	 *	Creates new form DevBrowser
	 */
	//=======================================================
    public DevBrowser(JFrame parent)
	{
 		super();
		this.parent = parent;
		initComponents();

		//  Create  Tree
		try
		{
			tree = new DevBrowserTree(this);
            treeScrollPane.setViewportView (tree);
		}
		catch (DevFailed e)
		{
           	ErrorPane.showErrorMessage(parent, null, e);
		}
        customizeMenu();
		pack();

        ATKGraphicsUtils.centerFrameOnScreen(this);
		jive.MultiLineToolTipUI.initialize();
    }
    //======================================================================
    //======================================================================
    private void customizeMenu()
    {
        //	File menu
        fileMenu.setMnemonic ('F');
        exitBtn.setMnemonic ('E');
        exitBtn.setAccelerator(KeyStroke.getKeyStroke('Q', Event.CTRL_MASK));
        viewMenu.setMnemonic ('V');
        eventsDlgBtn.setMnemonic ('E');
        eventsDlgBtn.setAccelerator(KeyStroke.getKeyStroke('E', Event.CTRL_MASK));
   }
	//===============================================================
	//===============================================================
	void displayEventProperties(String attname)
	{
		tree.displayEventProperties(attname);
	}

	//=======================================================
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	//=======================================================
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        textScrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        treeScrollPane = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitBtn = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        eventsDlgBtn = new javax.swing.JMenuItem();
        astorBtn = new javax.swing.JMenuItem();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        textScrollPane.setPreferredSize(new java.awt.Dimension(400, 400));
        textArea.setEditable(false);
        textArea.setFont(new java.awt.Font("monospaced", 1, 12));
        textScrollPane.setViewportView(textArea);

        jPanel1.add(textScrollPane, java.awt.BorderLayout.CENTER);

        treeScrollPane.setPreferredSize(new java.awt.Dimension(300, 400));
        jPanel1.add(treeScrollPane, java.awt.BorderLayout.WEST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        fileMenu.add(exitBtn);

        jMenuBar1.add(fileMenu);

        viewMenu.setText("View");
        eventsDlgBtn.setText("Events Panel");
        eventsDlgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventsDlgBtnActionPerformed(evt);
            }
        });

        viewMenu.add(eventsDlgBtn);

        astorBtn.setText("Astor Panel");
        astorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                astorBtnActionPerformed(evt);
            }
        });

        viewMenu.add(astorBtn);

        jMenuBar1.add(viewMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    //=======================================================
    //=======================================================
    private void astorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_astorBtnActionPerformed
	
		if (parent instanceof Astor)
		{
			Astor	astor = (Astor) parent;
	        if (astor!=null)
    	        astor.setVisible(true);
		}
    }//GEN-LAST:event_astorBtnActionPerformed

    //=======================================================
    //=======================================================
    private void eventsDlgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventsDlgBtnActionPerformed

        try
        {
            if (ev_table==null)
                ev_table = new EventsTable(this);
            ev_table.setVisible(true);
        }
        catch(DevFailed e)
        {
			ErrorPane.showErrorMessage(this, null, e);
        }
    }//GEN-LAST:event_eventsDlgBtnActionPerformed

	//=======================================================
	//=======================================================
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        doClose();
    }//GEN-LAST:event_exitBtnActionPerformed

	//=======================================================
    /**
	 *	Exit the Application
	 */
	//=======================================================
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        doClose();
    }//GEN-LAST:event_exitForm

	//===============================================================
	//===============================================================
    private void doClose()
    {
        setVisible(false);
		if (parent instanceof Astor)
		{
        	if (((Astor)parent).isVisible())
            	 dispose();
			else
            	((Astor)parent).doExit();
        }
		else
            dispose();
   }
	//===============================================================
	//===============================================================
	void setText(String str)
	{
		textArea.setText(str);
        textArea.setCaretPosition(0);
	}
	//===============================================================
	//===============================================================
	void add(String signame, int mode)
	{
        //  Build dialog if not already done.
        if (ev_table==null)
        {
            try
            {
                ev_table = new EventsTable(this);
            }
            catch(DevFailed e)
            {
				ErrorPane.showErrorMessage(this, null, e);
                return;
            }
            //ATKGraphicsUtils.centerDialog(ev_table);
        }
        ev_table.add(signame, mode);
	}
    //======================================================
    //======================================================
    void displayHostPanel(String devname)
    {
		if (parent instanceof Astor)
		{
			Astor	astor  = (Astor)parent;
	        astor.tree.displayHostInfo(devname);
		}
    }
    //======================================================
    //======================================================
    void managePolling(SubscribedSignal sig)
    {
        try
        {
            new ManagePollingDialog(this, sig.devname, sig.attname).setVisible(true);
        }
        catch(DevFailed e)
        {
           	ErrorPane.showErrorMessage(parent, null, e);
        }
    }
    //======================================================
    //======================================================
    void managePolling(String devname)
    {
        try
        {
            new ManagePollingDialog(this, devname, "").setVisible(true);
        }
        catch(DevFailed e)
        {
           	ErrorPane.showErrorMessage(parent, null, e);
        }
    }
    //======================================================
    //======================================================
    void managePolling(DeviceProxy dev, String attname)
    {
        try
        {
            new ManagePollingDialog(
                    this, dev.name(), attname).setVisible(true);
        }
        catch(DevFailed e)
        {
           	ErrorPane.showErrorMessage(parent, null, e);
        }
    }
	//=======================================================
    /**
    * @param args the command line arguments
    */
	//=======================================================
    public static void main(String args[])
	{
		try
		{
			Astor		astor = new Astor();
			DevBrowser	db= new DevBrowser(astor);
			db.setVisible(true);
		}
		catch (DevFailed e)
		{
			ErrorPane.showErrorMessage(new JFrame(), null, e);
		}
	}

	//=======================================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem astorBtn;
    private javax.swing.JMenuItem eventsDlgBtn;
    private javax.swing.JMenuItem exitBtn;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea textArea;
    private javax.swing.JScrollPane textScrollPane;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
	//=======================================================

}
