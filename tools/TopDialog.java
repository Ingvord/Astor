//+======================================================================
// $Source$
//
// Project:   Tango
//
// Description:  Basic Dialog Class to display info
//
// $Author$
//
// Copyright (C) :      2004,2005,2006,2007,2008,2009
//						European Synchrotron Radiation Facility
//                      BP 220, Grenoble 38043
//                      FRANCE
//
// This file is part of Tango.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Revision$
//
// $Log$
// Revision 1.1  2009/01/30 09:32:58  pascal_verdier
// Black box management added for database.
// Black box management tool improved.
// Find TANGO object by filter added.
//
//
//-======================================================================

package admin.astor.tools;

import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;

import javax.swing.*;
import java.util.Vector;
import java.util.Comparator;
import java.util.Collections;
import java.awt.*;

//===============================================================
/**
 *	JDialog Class to display info
 *
 *	@author  Pascal Verdier
 */
//===============================================================


public class TopDialog extends JDialog
{
	private BlackBoxTable.BlackBox	black_box;
	private TopCompare				compare;
	private Vector<JTextArea>		textAreas;
	//private String					devname;
	//===============================================================
	/**
	 *	Creates new form TopDialog
	 */
	//===============================================================
	public TopDialog(JDialog parent, String devname, BlackBoxTable.BlackBox black_box)
	{
		super(parent, false);
		//this.devname   = devname;
		this.black_box = black_box;
		initComponents();
		textAreas = new Vector<JTextArea>();
		textAreas.add(null);	//	DATE is not used
		textAreas.add(operationTxt);
		textAreas.add(nameTxt);
		textAreas.add(sourceTxt);
		textAreas.add(hostTxt);
		textAreas.add(processTxt);

		for (int i= BlackBoxTable.OPERATION ; i<=BlackBoxTable.PROCESS ; i++)
		{
			textAreas.get(i).getParent().setPreferredSize(new Dimension(500, 350));
			textAreas.get(i).setFont(new Font("dialog", Font.BOLD, 12));
		}
		compare = new TopCompare();
		titleLabel.setText("Top on  " + devname);
		tabbedPane.setSelectedIndex(BlackBoxTable.HOST-1);	//	-1 for DATES not used

		pack();
 		ATKGraphicsUtils.centerDialog(this);
	}

	//===============================================================
	//===============================================================
	void displayTop()
	{
		if (black_box==null)
			return;

		for (int i= BlackBoxTable.OPERATION ; i<=BlackBoxTable.PROCESS ; i++)
			textAreas.get(i).setText(computeTop(i).toString());
	}
	//===============================================================
	//===============================================================
	private TopObject computeTop(int index)
	{
		TopObject	retVect = new TopObject();

		for (int i=0 ; i<black_box.nbRecords() ; i++)
		{
			Vector<String> line = black_box.getLine(i);
			String	item = line.get(index);
			boolean	found = false;
			for (Vector<String> vh : retVect)
			{
				if (vh.get(0).equals(item))
				{
					vh.add(item);
					found = true;
				}
			}
			if (! found)
			{
				Vector<String>	vh = new Vector<String>();
				vh.add(item);
				retVect.add(vh);
			}
		}

		//	Sort for size order
		Collections.sort(retVect, compare);

		return retVect;
	}
	//===============================================================
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	//===============================================================
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JButton cancelBtn = new javax.swing.JButton();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        tabbedPane = new javax.swing.JTabbedPane();
        javax.swing.JPanel operationPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        operationTxt = new javax.swing.JTextArea();
        javax.swing.JPanel namePanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        nameTxt = new javax.swing.JTextArea();
        javax.swing.JPanel sourcePanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane3 = new javax.swing.JScrollPane();
        sourceTxt = new javax.swing.JTextArea();
        javax.swing.JPanel hostPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane4 = new javax.swing.JScrollPane();
        hostTxt = new javax.swing.JTextArea();
        javax.swing.JPanel pocessPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane5 = new javax.swing.JScrollPane();
        processTxt = new javax.swing.JTextArea();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        cancelBtn.setText("Dismiss");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        jPanel1.add(cancelBtn);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 18));
        titleLabel.setText("Dialog Title");
        jPanel2.add(titleLabel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        operationPanel.setLayout(new java.awt.BorderLayout());

        operationTxt.setColumns(20);
        operationTxt.setEditable(false);
        operationTxt.setRows(5);
        jScrollPane1.setViewportView(operationTxt);

        operationPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("Operation", operationPanel);

        namePanel.setLayout(new java.awt.BorderLayout());

        nameTxt.setColumns(20);
        nameTxt.setEditable(false);
        nameTxt.setRows(5);
        jScrollPane2.setViewportView(nameTxt);

        namePanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("Name", namePanel);

        sourcePanel.setLayout(new java.awt.BorderLayout());

        sourceTxt.setColumns(20);
        sourceTxt.setEditable(false);
        sourceTxt.setRows(5);
        jScrollPane3.setViewportView(sourceTxt);

        sourcePanel.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("Source", sourcePanel);

        hostPanel.setLayout(new java.awt.BorderLayout());

        hostTxt.setColumns(20);
        hostTxt.setEditable(false);
        hostTxt.setRows(5);
        jScrollPane4.setViewportView(hostTxt);

        hostPanel.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("Host", hostPanel);

        pocessPanel.setLayout(new java.awt.BorderLayout());

        processTxt.setColumns(20);
        processTxt.setEditable(false);
        processTxt.setRows(5);
        jScrollPane5.setViewportView(processTxt);

        pocessPanel.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("Process", pocessPanel);

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	//===============================================================
	//===============================================================
	@SuppressWarnings({"UNUSED_SYMBOL"})
	private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
		//System.out.println(jScrollPane1.getPreferredSize());
		doClose();
	}//GEN-LAST:event_cancelBtnActionPerformed

	//===============================================================
	/**
	 *	Closes the dialog
	 */
	//===============================================================
	@SuppressWarnings({"UNUSED_SYMBOL"})
	private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
		doClose();
	}//GEN-LAST:event_closeDialog

	//===============================================================
	/**
	 *	Closes the dialog
	 */
	//===============================================================
	private void doClose()
	{
		setVisible(false);
		dispose();
	}
	//===============================================================
	//===============================================================
	public void showDialog()
	{
		displayTop();
		setVisible(true);
	}

	//===============================================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea hostTxt;
    private javax.swing.JTextArea nameTxt;
    private javax.swing.JTextArea operationTxt;
    private javax.swing.JTextArea processTxt;
    private javax.swing.JTextArea sourceTxt;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
	//===============================================================


	//======================================================
	//======================================================
	private class TopObject extends Vector<Vector<String>>
	{
		//======================================================
		public String toString()
		{
			StringBuffer	sb = new StringBuffer();
			for (Vector<String> vs : this)
				sb.append(vs.size()).append(" calls:\t")
						.append(vs.get(0)).append('\n');
			return sb.toString();
		}
	}
	//======================================================
	/**
	 *	MyCompare class to sort by size
	 */
	//======================================================
	class  TopCompare implements Comparator
	{
		public int compare(Object o1, Object o2)
		{
			Vector<String>	vs1 = (Vector<String>) o1;
			Vector<String>	vs2 = (Vector<String>) o2;

			if (vs1.size() == vs2.size())
				return 0;
			else
			if (vs1.size() < vs2.size())
				return 1;
			else
				return -1;
		}
	}


}
